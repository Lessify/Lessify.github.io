{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["lessify","Lessify","spaceId","environment","apiKey","intl","createIntl","locale","messages","App","formatMessage","props","state","this","changeLanguage","newLocale","translation","get","then","document","documentElement","lang","setState","value","className","onClick","id","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sTAKaA,EAAmB,IAAIC,IAAQ,CAC1CC,QAAS,uCACTC,YAAa,SACbC,OAAQ,6DAKCC,EAAOC,YAAW,CAACC,OAFR,KAE+BC,SAAU,KAG1CC,GAFJJ,EAAKK,c,kDAGpB,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IACDC,MAAQ,CACXL,OAAQ,IAHY,E,qDAOxB,WACEM,KAAKC,eAda,Q,4BAiBpB,SAAeC,GAA0B,IAAD,OACtCf,EAAQgB,YAAYC,IAAIF,GACvBG,MAAM,SAAAV,GACLH,EAAOC,YAAW,CAACC,OAAQQ,EAAWP,SAAUA,IAC1CH,EAAKK,cACXS,SAASC,gBAAgBC,KAAON,EAChC,EAAKO,SAAU,CAACf,OAAQQ,S,oBAI5B,WAAU,IAAD,OACP,MAAyB,KAAtBF,KAAKD,MAAML,OACJ,4CAGN,cAAC,IAAD,CAAiBgB,MAAOlB,EAAxB,SACE,qBAAKmB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,wBAAQC,QAAS,kBAAM,EAAKX,eAAe,OAA3C,gBACA,wBAAQW,QAAS,kBAAM,EAAKX,eAAe,OAA3C,gBACA,kCACE,gCACA,+BACE,gDACA,kDAGF,kCACA,+BACE,kDACA,6BAAI,cAAC,IAAD,CAAkBY,GAAG,0BAE3B,+BACE,6CACA,6BAAI,cAAC,IAAD,CAAkBA,GAAG,qBAE3B,+BACE,mDACA,6BAAI,cAAC,IAAD,CAAkBA,GAAG,2BAE3B,+BACE,2DACA,6BAAI,cAAC,IAAD,CAAkBA,GAAG,mCAE3B,+BACE,gDACA,6BAAI,cAAC,IAAD,CAAkBA,GAAG,wBAE3B,+BACE,sDACA,6BAAI,cAAC,IAAD,CAAkBA,GAAG,8BAE3B,+BACE,6CACA,6BAAI,cAAC,IAAD,CAAkBA,GAAG,qBAE3B,+BACE,8CACA,6BAAI,cAAC,IAAD,CAAkBA,GAAG,sBAE3B,+BACE,6CACA,6BAAI,cAAC,IAAD,CAAkBA,GAAG,sC,GA1EVC,IAAMC,YCFxBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,SAM5BX,M","file":"static/js/main.9eeaa15e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {createIntl, FormattedMessage, RawIntlProvider} from 'react-intl';\r\nimport {Lessify} from '@lessify/sdk';\r\n\r\nexport const lessify: Lessify = new Lessify({\r\n  spaceId: 'e600fed0-0674-11eb-8ebc-355c3e3200ae',\r\n  environment: 'master',\r\n  apiKey: 'api-key-Tqcgc-38872940-0d32-11eb-8a0e-61e5b1516e7a-Zlh7j'\r\n})\r\n\r\nconst initialLocale = 'en'\r\n/** You can use this variable in other files even after reassigning it. */\r\nexport let intl = createIntl({locale: initialLocale, messages: {}})\r\nexport let fmt = intl.formatMessage\r\n\r\nexport default class App extends React.Component<any, any>{\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      locale: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.changeLanguage(initialLocale);\r\n  }\r\n\r\n  changeLanguage(newLocale: string): void {\r\n    lessify.translation.get(newLocale)\r\n    .then( messages => {\r\n      intl = createIntl({locale: newLocale, messages: messages})\r\n      fmt = intl.formatMessage\r\n      document.documentElement.lang = newLocale\r\n      this.setState( {locale: newLocale})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if(this.state.locale === '') {\r\n      return (<div>Loading..</div>)\r\n    }\r\n    return (\r\n        <RawIntlProvider value={intl}>\r\n          <div className=\"App\">\r\n            <header className=\"App-header\">\r\n              <button onClick={() => this.changeLanguage('de')}>de</button>\r\n              <button onClick={() => this.changeLanguage('en')}>en</button>\r\n              <table>\r\n                <thead>\r\n                <tr>\r\n                  <th>Translation Id</th>\r\n                  <th>Translation</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr>\r\n                  <td>login.auth.wrong</td>\r\n                  <td><FormattedMessage id=\"login.auth.wrong\"/></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>login.email</td>\r\n                  <td><FormattedMessage id=\"login.email\"/></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>login.email.error</td>\r\n                  <td><FormattedMessage id=\"login.email.error\"/></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>login.maintenance.message</td>\r\n                  <td><FormattedMessage id=\"login.maintenance.message\"/></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>login.password</td>\r\n                  <td><FormattedMessage id=\"login.password\"/></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>login.password.error</td>\r\n                  <td><FormattedMessage id=\"login.password.error\"/></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>login.reset</td>\r\n                  <td><FormattedMessage id=\"login.reset\"/></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>login.submit</td>\r\n                  <td><FormattedMessage id=\"login.submit\"/></td>\r\n                </tr>\r\n                <tr>\r\n                  <td>login.title</td>\r\n                  <td><FormattedMessage id=\"login.title\"/></td>\r\n                </tr>\r\n                </tbody>\r\n              </table>\r\n            </header>\r\n          </div>\r\n        </RawIntlProvider>\r\n    );\r\n  }\r\n}\r\n\r\n// function App() {\r\n//\r\n//   const [locale, setLocale] = React.useState(initialLocale)\r\n//\r\n//   const changeLanguage = (newLocale: string): void => {\r\n//     lessify.translation.get(newLocale)\r\n//     .then( messages => {\r\n//       intl = createIntl({locale: newLocale, messages: messages},)\r\n//       fmt = intl.formatMessage\r\n//       document.documentElement.lang = newLocale\r\n//       setLocale(newLocale)\r\n//     })\r\n//   }\r\n//\r\n//   return (\r\n//       <RawIntlProvider value={intl}>\r\n//         <div className=\"App\">\r\n//           <header className=\"App-header\">\r\n//             <button onClick={() => changeLanguage('de')}>de</button>\r\n//             <button onClick={() => changeLanguage('en')}>en</button>\r\n//             <table>\r\n//               <thead>\r\n//               <tr>\r\n//                 <th>Translation Id</th>\r\n//                 <th>Translation</th>\r\n//               </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//               <tr>\r\n//                 <td>login.auth.wrong</td>\r\n//                 <td><FormattedMessage id=\"login.auth.wrong\"/></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>login.email</td>\r\n//                 <td><FormattedMessage id=\"login.email\"/></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>login.email.error</td>\r\n//                 <td><FormattedMessage id=\"login.email.error\"/></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>login.maintenance.message</td>\r\n//                 <td><FormattedMessage id=\"login.maintenance.message\"/></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>login.password</td>\r\n//                 <td><FormattedMessage id=\"login.password\"/></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>login.password.error</td>\r\n//                 <td><FormattedMessage id=\"login.password.error\"/></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>login.reset</td>\r\n//                 <td><FormattedMessage id=\"login.reset\"/></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>login.submit</td>\r\n//                 <td><FormattedMessage id=\"login.submit\"/></td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td>login.title</td>\r\n//                 <td><FormattedMessage id=\"login.title\"/></td>\r\n//               </tr>\r\n//               </tbody>\r\n//             </table>\r\n//           </header>\r\n//         </div>\r\n//       </RawIntlProvider>\r\n//   );\r\n// }\r\n//\r\n// export default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}