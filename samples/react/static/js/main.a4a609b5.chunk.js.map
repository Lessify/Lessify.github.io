{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["withTranslation","useTranslation","t","i18n","changeLanguage","lng","className","onClick","Boolean","window","location","hostname","match","i18next","use","I18NextHttpBackend","initReactI18next","init","fallbackLng","debug","keySeparator","interpolation","escapeValue","backend","LessifyReactI18next","space","spaceId","environment","apiKey","ReactDOM","render","fallback","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAmEeA,qBA/Df,WAAgB,IAAD,EACKC,cAAXC,EADM,EACNA,EAAGC,EADG,EACHA,KAEJC,EAAiB,SAACC,GACtBF,EAAKC,eAAeC,IAEtB,OACI,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAQC,QAAS,kBAAMH,EAAe,QAAtC,MACA,4BAAQG,QAAS,kBAAMH,EAAe,QAAtC,MACA,+BACE,+BACA,4BACE,8CACA,6CAGF,+BACA,4BACE,gDACA,4BAAKF,EAAE,sBAET,4BACE,2CACA,4BAAKA,EAAE,iBAET,4BACE,iDACA,4BAAKA,EAAE,uBAET,4BACE,yDACA,4BAAKA,EAAE,+BAET,4BACE,8CACA,4BAAKA,EAAE,oBAET,4BACE,oDACA,4BAAKA,EAAE,0BAET,4BACE,2CACA,4BAAKA,EAAE,iBAET,4BACE,4CACA,4BAAKA,EAAE,kBAET,4BACE,2CACA,4BAAKA,EAAE,wBC7CDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCRNC,IACCC,IAAIC,KACJD,IAAIE,KACJC,KACG,CACEC,YAAa,KACbb,IAAK,KACLc,OAAO,EACPC,cAAc,EACdC,cAAe,CACbC,aAAa,GAEfC,QAASC,YACL,CACEC,MAAQ,CACNC,QAAS,uCACTC,YAAa,SACbC,OAAQ,gEAOtBC,IAASC,OACL,kBAAC,WAAD,CAAUC,SAAS,WACjB,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAIJC,SAASC,eAAe,SDkGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a4a609b5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {useTranslation, withTranslation} from 'react-i18next';\n\nfunction App() {\n  const {t, i18n} = useTranslation();\n\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(lng);\n  };\n  return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <button onClick={() => changeLanguage('de')}>de</button>\n          <button onClick={() => changeLanguage('en')}>en</button>\n          <table>\n            <thead>\n            <tr>\n              <th>Translation Id</th>\n              <th>Translation</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>login.auth.wrong</td>\n              <td>{t('login.auth.wrong')}</td>\n            </tr>\n            <tr>\n              <td>login.email</td>\n              <td>{t('login.email')}</td>\n            </tr>\n            <tr>\n              <td>login.email.error</td>\n              <td>{t('login.email.error')}</td>\n            </tr>\n            <tr>\n              <td>login.maintenance.message</td>\n              <td>{t('login.maintenance.message')}</td>\n            </tr>\n            <tr>\n              <td>login.password</td>\n              <td>{t('login.password')}</td>\n            </tr>\n            <tr>\n              <td>login.password.error</td>\n              <td>{t('login.password.error')}</td>\n            </tr>\n            <tr>\n              <td>login.reset</td>\n              <td>{t('login.reset')}</td>\n            </tr>\n            <tr>\n              <td>login.submit</td>\n              <td>{t('login.submit')}</td>\n            </tr>\n            <tr>\n              <td>login.title</td>\n              <td>{t('login.title')}</td>\n            </tr>\n\n            </tbody>\n          </table>\n        </header>\n      </div>\n  );\n}\n\nexport default withTranslation()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport i18next from 'i18next';\nimport I18NextHttpBackend from 'i18next-http-backend';\nimport {initReactI18next} from 'react-i18next';\nimport {LessifyReactI18next} from '@lessify/react-i18next'\n\ni18next\n.use(I18NextHttpBackend)\n.use(initReactI18next)\n.init(\n    {\n      fallbackLng: 'en',\n      lng: 'en',\n      debug: true,\n      keySeparator: false,\n      interpolation: {\n        escapeValue: false\n      },\n      backend: LessifyReactI18next(\n          {\n            space : {\n              spaceId: 'e600fed0-0674-11eb-8ebc-355c3e3200ae',\n              environment: 'master',\n              apiKey: 'api-key-Tqcgc-38872940-0d32-11eb-8a0e-61e5b1516e7a-Zlh7j'\n            }\n          }\n      )\n    }\n)\n\nReactDOM.render(\n    <Suspense fallback=\"loading\">\n      <React.StrictMode>\n        <App/>\n      </React.StrictMode>\n    </Suspense>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}